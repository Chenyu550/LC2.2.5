// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class MovieRacingInfoOuterClass {
  /**
   * Protobuf type {@code MovieRacingInfo}
   */
  public static final class MovieRacingInfo extends ProtoMessage<MovieRacingInfo> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <code>optional uint32 score = 7;</code>
     */
    private int score;

    /**
     * <code>optional uint32 JCBFOKGBHBO = 11;</code>
     */
    private int jCBFOKGBHBO;

    /**
     * <code>optional uint32 level = 12;</code>
     */
    private int level;

    /**
     * <code>optional .MovieRacingType type = 2;</code>
     */
    private int type;

    private MovieRacingInfo() {
    }

    /**
     * @return a new empty instance of {@code MovieRacingInfo}
     */
    public static MovieRacingInfo newInstance() {
      return new MovieRacingInfo();
    }

    /**
     * <code>optional uint32 score = 7;</code>
     * @return whether the score field is set
     */
    public boolean hasScore() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <code>optional uint32 score = 7;</code>
     * @return this
     */
    public MovieRacingInfo clearScore() {
      bitField0_ &= ~0x00000001;
      score = 0;
      return this;
    }

    /**
     * <code>optional uint32 score = 7;</code>
     * @return the score
     */
    public int getScore() {
      return score;
    }

    /**
     * <code>optional uint32 score = 7;</code>
     * @param value the score to set
     * @return this
     */
    public MovieRacingInfo setScore(final int value) {
      bitField0_ |= 0x00000001;
      score = value;
      return this;
    }

    /**
     * <code>optional uint32 JCBFOKGBHBO = 11;</code>
     * @return whether the jCBFOKGBHBO field is set
     */
    public boolean hasJCBFOKGBHBO() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <code>optional uint32 JCBFOKGBHBO = 11;</code>
     * @return this
     */
    public MovieRacingInfo clearJCBFOKGBHBO() {
      bitField0_ &= ~0x00000002;
      jCBFOKGBHBO = 0;
      return this;
    }

    /**
     * <code>optional uint32 JCBFOKGBHBO = 11;</code>
     * @return the jCBFOKGBHBO
     */
    public int getJCBFOKGBHBO() {
      return jCBFOKGBHBO;
    }

    /**
     * <code>optional uint32 JCBFOKGBHBO = 11;</code>
     * @param value the jCBFOKGBHBO to set
     * @return this
     */
    public MovieRacingInfo setJCBFOKGBHBO(final int value) {
      bitField0_ |= 0x00000002;
      jCBFOKGBHBO = value;
      return this;
    }

    /**
     * <code>optional uint32 level = 12;</code>
     * @return whether the level field is set
     */
    public boolean hasLevel() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <code>optional uint32 level = 12;</code>
     * @return this
     */
    public MovieRacingInfo clearLevel() {
      bitField0_ &= ~0x00000004;
      level = 0;
      return this;
    }

    /**
     * <code>optional uint32 level = 12;</code>
     * @return the level
     */
    public int getLevel() {
      return level;
    }

    /**
     * <code>optional uint32 level = 12;</code>
     * @param value the level to set
     * @return this
     */
    public MovieRacingInfo setLevel(final int value) {
      bitField0_ |= 0x00000004;
      level = value;
      return this;
    }

    /**
     * <code>optional .MovieRacingType type = 2;</code>
     * @return whether the type field is set
     */
    public boolean hasType() {
      return (bitField0_ & 0x00000008) != 0;
    }

    /**
     * <code>optional .MovieRacingType type = 2;</code>
     * @return this
     */
    public MovieRacingInfo clearType() {
      bitField0_ &= ~0x00000008;
      type = 0;
      return this;
    }

    /**
     * <code>optional .MovieRacingType type = 2;</code>
     * @return the type
     */
    public MovieRacingTypeOuterClass.MovieRacingType getType() {
      return MovieRacingTypeOuterClass.MovieRacingType.forNumber(type);
    }

    /**
     * Gets the value of the internal enum store. The result is
     * equivalent to {@link MovieRacingInfo#getType()}.getNumber().
     *
     * @return numeric wire representation
     */
    public int getTypeValue() {
      return type;
    }

    /**
     * Sets the value of the internal enum store. This does not
     * do any validity checks, so be sure to use appropriate value
     * constants from {@link MovieRacingTypeOuterClass.MovieRacingType}. Setting an invalid value
     * can cause {@link MovieRacingInfo#getType()} to return null
     *
     * @param value the numeric wire value to set
     * @return this
     */
    public MovieRacingInfo setTypeValue(final int value) {
      bitField0_ |= 0x00000008;
      type = value;
      return this;
    }

    /**
     * <code>optional .MovieRacingType type = 2;</code>
     * @param value the type to set
     * @return this
     */
    public MovieRacingInfo setType(final MovieRacingTypeOuterClass.MovieRacingType value) {
      bitField0_ |= 0x00000008;
      type = value.getNumber();
      return this;
    }

    @Override
    public MovieRacingInfo copyFrom(final MovieRacingInfo other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        score = other.score;
        jCBFOKGBHBO = other.jCBFOKGBHBO;
        level = other.level;
        type = other.type;
      }
      return this;
    }

    @Override
    public MovieRacingInfo mergeFrom(final MovieRacingInfo other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasScore()) {
        setScore(other.score);
      }
      if (other.hasJCBFOKGBHBO()) {
        setJCBFOKGBHBO(other.jCBFOKGBHBO);
      }
      if (other.hasLevel()) {
        setLevel(other.level);
      }
      if (other.hasType()) {
        setTypeValue(other.type);
      }
      return this;
    }

    @Override
    public MovieRacingInfo clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      score = 0;
      jCBFOKGBHBO = 0;
      level = 0;
      type = 0;
      return this;
    }

    @Override
    public MovieRacingInfo clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof MovieRacingInfo)) {
        return false;
      }
      MovieRacingInfo other = (MovieRacingInfo) o;
      return bitField0_ == other.bitField0_
        && (!hasScore() || score == other.score)
        && (!hasJCBFOKGBHBO() || jCBFOKGBHBO == other.jCBFOKGBHBO)
        && (!hasLevel() || level == other.level)
        && (!hasType() || type == other.type);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 56);
        output.writeUInt32NoTag(score);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 88);
        output.writeUInt32NoTag(jCBFOKGBHBO);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 96);
        output.writeUInt32NoTag(level);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeRawByte((byte) 16);
        output.writeEnumNoTag(type);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(score);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(jCBFOKGBHBO);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(level);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        size += 1 + ProtoSink.computeEnumSizeNoTag(type);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public MovieRacingInfo mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 56: {
            // score
            score = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 88) {
              break;
            }
          }
          case 88: {
            // jCBFOKGBHBO
            jCBFOKGBHBO = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 96) {
              break;
            }
          }
          case 96: {
            // level
            level = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 16) {
              break;
            }
          }
          case 16: {
            // type
            final int value = input.readInt32();
            if (MovieRacingTypeOuterClass.MovieRacingType.forNumber(value) != null) {
              type = value;
              bitField0_ |= 0x00000008;
            }
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.score, score);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.jCBFOKGBHBO, jCBFOKGBHBO);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.level, level);
      }
      if ((bitField0_ & 0x00000008) != 0) {
        output.writeEnum(FieldNames.type, type, MovieRacingTypeOuterClass.MovieRacingType.converter());
      }
      output.endObject();
    }

    @Override
    public MovieRacingInfo mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 109264530: {
            if (input.isAtField(FieldNames.score)) {
              if (!input.trySkipNullValue()) {
                score = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 1905952161: {
            if (input.isAtField(FieldNames.jCBFOKGBHBO)) {
              if (!input.trySkipNullValue()) {
                jCBFOKGBHBO = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 102865796: {
            if (input.isAtField(FieldNames.level)) {
              if (!input.trySkipNullValue()) {
                level = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 3575610: {
            if (input.isAtField(FieldNames.type)) {
              if (!input.trySkipNullValue()) {
                final MovieRacingTypeOuterClass.MovieRacingType value = input.readEnum(MovieRacingTypeOuterClass.MovieRacingType.converter());
                if (value != null) {
                  type = value.getNumber();
                  bitField0_ |= 0x00000008;
                } else {
                  input.skipUnknownEnumValue();
                }
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public MovieRacingInfo clone() {
      return new MovieRacingInfo().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static MovieRacingInfo parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new MovieRacingInfo(), data).checkInitialized();
    }

    public static MovieRacingInfo parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new MovieRacingInfo(), input).checkInitialized();
    }

    public static MovieRacingInfo parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new MovieRacingInfo(), input).checkInitialized();
    }

    /**
     * @return factory for creating MovieRacingInfo messages
     */
    public static MessageFactory<MovieRacingInfo> getFactory() {
      return MovieRacingInfoFactory.INSTANCE;
    }

    private enum MovieRacingInfoFactory implements MessageFactory<MovieRacingInfo> {
      INSTANCE;

      @Override
      public MovieRacingInfo create() {
        return MovieRacingInfo.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName score = FieldName.forField("score");

      static final FieldName jCBFOKGBHBO = FieldName.forField("JCBFOKGBHBO");

      static final FieldName level = FieldName.forField("level");

      static final FieldName type = FieldName.forField("type");
    }
  }
}
