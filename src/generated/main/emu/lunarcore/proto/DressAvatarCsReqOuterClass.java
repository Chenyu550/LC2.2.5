// Code generated by protocol buffer compiler. Do not edit!
package emu.lunarcore.proto;

import java.io.IOException;
import us.hebi.quickbuf.FieldName;
import us.hebi.quickbuf.InvalidProtocolBufferException;
import us.hebi.quickbuf.JsonSink;
import us.hebi.quickbuf.JsonSource;
import us.hebi.quickbuf.MessageFactory;
import us.hebi.quickbuf.ProtoMessage;
import us.hebi.quickbuf.ProtoSink;
import us.hebi.quickbuf.ProtoSource;

public final class DressAvatarCsReqOuterClass {
  /**
   * Protobuf type {@code DressAvatarCsReq}
   */
  public static final class DressAvatarCsReq extends ProtoMessage<DressAvatarCsReq> implements Cloneable {
    private static final long serialVersionUID = 0L;

    /**
     * <pre>
     * 10
     * </pre>
     *
     * <code>optional uint32 equip_avatar_id = 2;</code>
     */
    private int equipAvatarId;

    /**
     * <pre>
     * 3
     * </pre>
     *
     * <code>optional uint32 equipment_unique_id = 14;</code>
     */
    private int equipmentUniqueId;

    /**
     * <pre>
     * 4
     * </pre>
     *
     * <code>optional uint32 base_avatar_id = 15;</code>
     */
    private int baseAvatarId;

    private DressAvatarCsReq() {
    }

    /**
     * @return a new empty instance of {@code DressAvatarCsReq}
     */
    public static DressAvatarCsReq newInstance() {
      return new DressAvatarCsReq();
    }

    /**
     * <pre>
     * 10
     * </pre>
     *
     * <code>optional uint32 equip_avatar_id = 2;</code>
     * @return whether the equipAvatarId field is set
     */
    public boolean hasEquipAvatarId() {
      return (bitField0_ & 0x00000001) != 0;
    }

    /**
     * <pre>
     * 10
     * </pre>
     *
     * <code>optional uint32 equip_avatar_id = 2;</code>
     * @return this
     */
    public DressAvatarCsReq clearEquipAvatarId() {
      bitField0_ &= ~0x00000001;
      equipAvatarId = 0;
      return this;
    }

    /**
     * <pre>
     * 10
     * </pre>
     *
     * <code>optional uint32 equip_avatar_id = 2;</code>
     * @return the equipAvatarId
     */
    public int getEquipAvatarId() {
      return equipAvatarId;
    }

    /**
     * <pre>
     * 10
     * </pre>
     *
     * <code>optional uint32 equip_avatar_id = 2;</code>
     * @param value the equipAvatarId to set
     * @return this
     */
    public DressAvatarCsReq setEquipAvatarId(final int value) {
      bitField0_ |= 0x00000001;
      equipAvatarId = value;
      return this;
    }

    /**
     * <pre>
     * 3
     * </pre>
     *
     * <code>optional uint32 equipment_unique_id = 14;</code>
     * @return whether the equipmentUniqueId field is set
     */
    public boolean hasEquipmentUniqueId() {
      return (bitField0_ & 0x00000002) != 0;
    }

    /**
     * <pre>
     * 3
     * </pre>
     *
     * <code>optional uint32 equipment_unique_id = 14;</code>
     * @return this
     */
    public DressAvatarCsReq clearEquipmentUniqueId() {
      bitField0_ &= ~0x00000002;
      equipmentUniqueId = 0;
      return this;
    }

    /**
     * <pre>
     * 3
     * </pre>
     *
     * <code>optional uint32 equipment_unique_id = 14;</code>
     * @return the equipmentUniqueId
     */
    public int getEquipmentUniqueId() {
      return equipmentUniqueId;
    }

    /**
     * <pre>
     * 3
     * </pre>
     *
     * <code>optional uint32 equipment_unique_id = 14;</code>
     * @param value the equipmentUniqueId to set
     * @return this
     */
    public DressAvatarCsReq setEquipmentUniqueId(final int value) {
      bitField0_ |= 0x00000002;
      equipmentUniqueId = value;
      return this;
    }

    /**
     * <pre>
     * 4
     * </pre>
     *
     * <code>optional uint32 base_avatar_id = 15;</code>
     * @return whether the baseAvatarId field is set
     */
    public boolean hasBaseAvatarId() {
      return (bitField0_ & 0x00000004) != 0;
    }

    /**
     * <pre>
     * 4
     * </pre>
     *
     * <code>optional uint32 base_avatar_id = 15;</code>
     * @return this
     */
    public DressAvatarCsReq clearBaseAvatarId() {
      bitField0_ &= ~0x00000004;
      baseAvatarId = 0;
      return this;
    }

    /**
     * <pre>
     * 4
     * </pre>
     *
     * <code>optional uint32 base_avatar_id = 15;</code>
     * @return the baseAvatarId
     */
    public int getBaseAvatarId() {
      return baseAvatarId;
    }

    /**
     * <pre>
     * 4
     * </pre>
     *
     * <code>optional uint32 base_avatar_id = 15;</code>
     * @param value the baseAvatarId to set
     * @return this
     */
    public DressAvatarCsReq setBaseAvatarId(final int value) {
      bitField0_ |= 0x00000004;
      baseAvatarId = value;
      return this;
    }

    @Override
    public DressAvatarCsReq copyFrom(final DressAvatarCsReq other) {
      cachedSize = other.cachedSize;
      if ((bitField0_ | other.bitField0_) != 0) {
        bitField0_ = other.bitField0_;
        equipAvatarId = other.equipAvatarId;
        equipmentUniqueId = other.equipmentUniqueId;
        baseAvatarId = other.baseAvatarId;
      }
      return this;
    }

    @Override
    public DressAvatarCsReq mergeFrom(final DressAvatarCsReq other) {
      if (other.isEmpty()) {
        return this;
      }
      cachedSize = -1;
      if (other.hasEquipAvatarId()) {
        setEquipAvatarId(other.equipAvatarId);
      }
      if (other.hasEquipmentUniqueId()) {
        setEquipmentUniqueId(other.equipmentUniqueId);
      }
      if (other.hasBaseAvatarId()) {
        setBaseAvatarId(other.baseAvatarId);
      }
      return this;
    }

    @Override
    public DressAvatarCsReq clear() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      equipAvatarId = 0;
      equipmentUniqueId = 0;
      baseAvatarId = 0;
      return this;
    }

    @Override
    public DressAvatarCsReq clearQuick() {
      if (isEmpty()) {
        return this;
      }
      cachedSize = -1;
      bitField0_ = 0;
      return this;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (!(o instanceof DressAvatarCsReq)) {
        return false;
      }
      DressAvatarCsReq other = (DressAvatarCsReq) o;
      return bitField0_ == other.bitField0_
        && (!hasEquipAvatarId() || equipAvatarId == other.equipAvatarId)
        && (!hasEquipmentUniqueId() || equipmentUniqueId == other.equipmentUniqueId)
        && (!hasBaseAvatarId() || baseAvatarId == other.baseAvatarId);
    }

    @Override
    public void writeTo(final ProtoSink output) throws IOException {
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeRawByte((byte) 16);
        output.writeUInt32NoTag(equipAvatarId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeRawByte((byte) 112);
        output.writeUInt32NoTag(equipmentUniqueId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeRawByte((byte) 120);
        output.writeUInt32NoTag(baseAvatarId);
      }
    }

    @Override
    protected int computeSerializedSize() {
      int size = 0;
      if ((bitField0_ & 0x00000001) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(equipAvatarId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(equipmentUniqueId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        size += 1 + ProtoSink.computeUInt32SizeNoTag(baseAvatarId);
      }
      return size;
    }

    @Override
    @SuppressWarnings("fallthrough")
    public DressAvatarCsReq mergeFrom(final ProtoSource input) throws IOException {
      // Enabled Fall-Through Optimization (QuickBuffers)
      int tag = input.readTag();
      while (true) {
        switch (tag) {
          case 16: {
            // equipAvatarId
            equipAvatarId = input.readUInt32();
            bitField0_ |= 0x00000001;
            tag = input.readTag();
            if (tag != 112) {
              break;
            }
          }
          case 112: {
            // equipmentUniqueId
            equipmentUniqueId = input.readUInt32();
            bitField0_ |= 0x00000002;
            tag = input.readTag();
            if (tag != 120) {
              break;
            }
          }
          case 120: {
            // baseAvatarId
            baseAvatarId = input.readUInt32();
            bitField0_ |= 0x00000004;
            tag = input.readTag();
            if (tag != 0) {
              break;
            }
          }
          case 0: {
            return this;
          }
          default: {
            if (!input.skipField(tag)) {
              return this;
            }
            tag = input.readTag();
            break;
          }
        }
      }
    }

    @Override
    public void writeTo(final JsonSink output) throws IOException {
      output.beginObject();
      if ((bitField0_ & 0x00000001) != 0) {
        output.writeUInt32(FieldNames.equipAvatarId, equipAvatarId);
      }
      if ((bitField0_ & 0x00000002) != 0) {
        output.writeUInt32(FieldNames.equipmentUniqueId, equipmentUniqueId);
      }
      if ((bitField0_ & 0x00000004) != 0) {
        output.writeUInt32(FieldNames.baseAvatarId, baseAvatarId);
      }
      output.endObject();
    }

    @Override
    public DressAvatarCsReq mergeFrom(final JsonSource input) throws IOException {
      if (!input.beginObject()) {
        return this;
      }
      while (!input.isAtEnd()) {
        switch (input.readFieldHash()) {
          case 169047204:
          case 33057906: {
            if (input.isAtField(FieldNames.equipAvatarId)) {
              if (!input.trySkipNullValue()) {
                equipAvatarId = input.readUInt32();
                bitField0_ |= 0x00000001;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case -1867136902:
          case 760467160: {
            if (input.isAtField(FieldNames.equipmentUniqueId)) {
              if (!input.trySkipNullValue()) {
                equipmentUniqueId = input.readUInt32();
                bitField0_ |= 0x00000002;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          case 118022725:
          case -1756826157: {
            if (input.isAtField(FieldNames.baseAvatarId)) {
              if (!input.trySkipNullValue()) {
                baseAvatarId = input.readUInt32();
                bitField0_ |= 0x00000004;
              }
            } else {
              input.skipUnknownField();
            }
            break;
          }
          default: {
            input.skipUnknownField();
            break;
          }
        }
      }
      input.endObject();
      return this;
    }

    @Override
    public DressAvatarCsReq clone() {
      return new DressAvatarCsReq().copyFrom(this);
    }

    @Override
    public boolean isEmpty() {
      return ((bitField0_) == 0);
    }

    public static DressAvatarCsReq parseFrom(final byte[] data) throws
        InvalidProtocolBufferException {
      return ProtoMessage.mergeFrom(new DressAvatarCsReq(), data).checkInitialized();
    }

    public static DressAvatarCsReq parseFrom(final ProtoSource input) throws IOException {
      return ProtoMessage.mergeFrom(new DressAvatarCsReq(), input).checkInitialized();
    }

    public static DressAvatarCsReq parseFrom(final JsonSource input) throws IOException {
      return ProtoMessage.mergeFrom(new DressAvatarCsReq(), input).checkInitialized();
    }

    /**
     * @return factory for creating DressAvatarCsReq messages
     */
    public static MessageFactory<DressAvatarCsReq> getFactory() {
      return DressAvatarCsReqFactory.INSTANCE;
    }

    private enum DressAvatarCsReqFactory implements MessageFactory<DressAvatarCsReq> {
      INSTANCE;

      @Override
      public DressAvatarCsReq create() {
        return DressAvatarCsReq.newInstance();
      }
    }

    /**
     * Contains name constants used for serializing JSON
     */
    static class FieldNames {
      static final FieldName equipAvatarId = FieldName.forField("equipAvatarId", "equip_avatar_id");

      static final FieldName equipmentUniqueId = FieldName.forField("equipmentUniqueId", "equipment_unique_id");

      static final FieldName baseAvatarId = FieldName.forField("baseAvatarId", "base_avatar_id");
    }
  }
}
